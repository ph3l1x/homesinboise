<?php

/**
 * Implements hook_entity_property_info_alter().
 * @param $info
 */
function drealty_reconciler_entity_property_info_alter(&$info) {
  $properties = &$info['drealty_listing']['properties'];

  $properties['last_reconciled'] = array(
    'label' => t("Last reconciled"),
    'description' => t("Date the listing was last reconciled against RETS."),
    'type' => 'integer',
    'schema field' => 'last_reconciled',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
}

/**
 * Implements hook_cron().
 * Queues the system for listings that have not been reconciled for a while and checks that they still exist in RETS.
 */
function drealty_reconciler_cron() {
  $queue = DrupalQueue::get('drealty_reconciler');
  $timestamp = strtotime('-' . variable_get('drealty_reconciler_check', 7) . ' days');

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'drealty_listing');
  $query->propertyCondition('status', 1);
  $query->propertyCondition('last_reconciled', $timestamp, '<=');

  $result = $query->execute();

  foreach ($result['drealty_listing'] as $id => $item) {
    $listing = drealty_listing_load($id);

    $item = array(
      'entity_type' => 'drealty_listing',
      'entity_id' => $listing->id,
      'rets_key' => $listing->rets_key,
      'rets_id' => $listing->rets_id,
    );

    $queue->createItem($item);
  }
}

/**
 * Implements hook_cron_queue_info().
 * @return array
 */
function drealty_reconciler_cron_queue_info() {
  $queues = array();

  $queues['drealty_reconciler'] = array(
    'worker callback' => 'drealty_reconciler_process_item',
  );

  return $queues;
}

/**
 * Callback from hook_cron_queue_info().
 * @param $item
 */
function drealty_reconciler_process_item($item) {
  // handoff
}